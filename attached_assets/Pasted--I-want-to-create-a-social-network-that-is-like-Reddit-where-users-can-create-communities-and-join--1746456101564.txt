
I want to create a social network that is like Reddit where users can create communities and join existing ones. Users will see list of posts from just like LinkedIn, Reddit and LinkedIn when they login. Use Reddit as a base clone because users should post to  communities, but combine features of Medium.com so that these posts within these communities can also appear as blogs (i.e will have e.g workfounder.com/name of article, add required tools found in Reddit and Medium.com that are available for users who want to write a post e.g polls, enabling html in post, formatting etc. There are no free trials, users have to pay as they sign up. User can login with username or email. The process flow for user registration is: 1. User provides profile details like Username, Email, First Name, Last Name, Address Line 1, Address Line 2 (optional), City, Zip/Post Code, Industry (optional), Gender (Male, Female, Prefer Not to Say), Phone (optional). 2. User profile data from registration form is stored temporarily > User is redirected to payment form (primarily Stripe, but users can also make payment with Flutterwave, PayPal, Apple Pay and Google Pay) > If payment was successful payment processor will notify the user registration system of the successful payment > If payment wasn't succesful user will get a pop up notification of failed user registration and failed payment > The payment details will be merged with the temporary user data and then saved properly so that the user will be linked with their payment details > User will receive a confirmation email of successful registration > End of user registration.

Below is the overall process flow of how the system will work:

User visits website via home page > User sees login link on navigation bar (they see logout link if they are signed in) >  If they are logged in they see posts (just like Reddit) > If they want to comment they go to comment box and type > Comment is queued > Latest model of OpenAI will read the comment and ask the commentor why they made that comment or the reason for the prompt (user can change the option in their account settings for comments to appear directly) > The commenter will types a response > The AI (OpenAI) will ask the commenter if they have an idea or answer to the comment (it will suggest to the commenter that if they have a question or if they detected a question, so they should enable direct comment in profile settings to ask questions) > Commenter responds > AI generates process flow of their answer, suggestion or idea just like Figma or Visio diagrams (at least 3) > Commentor chooses the diagram closest to their suggestion or chooses an option for "Other" i.e if it's not available. > Original user who made the post or wrote the article will see workflow suggestion > If original author of post wants to respond to that post that passed through the interactive workflow they will also pass through the same process of answering to the AI (just like the commentor) and commentor will see the process flow. > After the first exchange of responses between the two, the AI will present an additional option of allowing each party to have a prototype of an application generated from their discussion instead of AI passing through the original workflow of finding out what they meant, and reasons for comment. Each party has a maximum of 3 prompts each at this level of their discussion for the prototype. These prototypes will be viewed in a dedicated dev environment e.g the AI will take the prompts and run it in clone of Replit or an internal online coding tool where output can be previewed. It can be archived and viewed. later. Another option is to allow the two users to start a video call automatically via Zoom, Teams or Google Meets (they will be prompted to provide their login credentials which will be saved and remain persistent in the application so that they can have live meetings next time rather than login in again) > If users want to do more prompt they have to upgrade to a pro plan which will charge them more.
If they upgrade they can still downgrade to the current premium plan they are using or delete their payment details and account as well.  > These chats can also be formatted, numbered and grouped shared to a project management tool like Jira, Azure DevOps, Trello and external/custom tools (create provisions like that e.g. exposing API's, i'm being agnostic but do it using industry best practices) where they can be saved in product backlogs as items. They can also be converted to User stories, Epics, Functional Requirements or Non-Functional if they are one.